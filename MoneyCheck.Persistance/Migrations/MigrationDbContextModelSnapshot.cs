// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoneyCheck.Persistance.Contexts;

#nullable disable

namespace MoneyCheck.Persistance.Migrations
{
    [DbContext(typeof(MigrationDbContext))]
    partial class MigrationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.ActualItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("actual_item_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("amount");

                    b.Property<int>("BudgetId")
                        .HasColumnType("int")
                        .HasColumnName("budget_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("currency");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("purchase_date");

                    b.Property<int?>("TripId")
                        .HasColumnType("int")
                        .HasColumnName("trip_id");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId")
                        .HasDatabaseName("fk_actual_item_budget");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("fk_actual_item_category");

                    b.HasIndex("TripId")
                        .HasDatabaseName("fk_actual_item_trip");

                    b.ToTable("actual_item", (string)null);
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.Budget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("budget_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BudgetName")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("varchar(45)")
                        .HasColumnName("budget_name");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("BudgetName")
                        .IsUnique()
                        .HasDatabaseName("uk_budget__budget_name");

                    b.ToTable("budget", (string)null);
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.BudgetItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("budget_item_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("currency");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    b.Property<decimal>("UnitValue")
                        .HasColumnType("decimal(9, 2)")
                        .HasColumnName("unit_value");

                    b.Property<int>("VersionId")
                        .HasColumnType("int")
                        .HasColumnName("version_id");

                    b.HasKey("Id");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("fk_budget_item_unit");

                    b.HasIndex("VersionId")
                        .HasDatabaseName("fk_budget_item_version");

                    b.HasIndex("CategoryId", "UnitId", "VersionId")
                        .IsUnique()
                        .HasDatabaseName("uk_budget_item__version_id__category_id__unit_id");

                    b.ToTable("budget_item", (string)null);
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.BudgetVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("version_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BudgetYearId")
                        .HasColumnType("int")
                        .HasColumnName("budget_year_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date")
                        .HasColumnName("date_created");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_closed");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("VersionName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("version_name");

                    b.HasKey("Id");

                    b.HasIndex("BudgetYearId")
                        .IsUnique()
                        .HasDatabaseName("fk_version_budget_year");

                    b.ToTable("version", (string)null);
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.BudgetYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("budget_year_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BudgetId")
                        .HasColumnType("int")
                        .HasColumnName("budget_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Year")
                        .HasColumnType("int")
                        .HasColumnName("budget_year");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("Year", "BudgetId")
                        .IsUnique()
                        .HasDatabaseName("uk_budget_year__budget_id__budget_year_id");

                    b.ToTable("budget_year", (string)null);
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BudgetId")
                        .HasColumnType("int")
                        .HasColumnName("budget_id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId", "CategoryName")
                        .IsUnique()
                        .HasDatabaseName("uk_category__budget_id__category_name");

                    b.ToTable("category", (string)null);
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("currency_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AverageRate")
                        .HasColumnType("decimal(9, 4)")
                        .HasColumnName("average_rate");

                    b.Property<decimal>("BudgetRate")
                        .HasColumnType("decimal(9, 4)")
                        .HasColumnName("budget_rate");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("currency");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("VersionId")
                        .HasColumnType("int")
                        .HasColumnName("version_id");

                    b.HasKey("Id");

                    b.HasIndex("VersionId", "Code")
                        .IsUnique()
                        .HasDatabaseName("uk_currency__version_id__currency");

                    b.ToTable("currency", (string)null);
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("hashed_password");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_admin");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password_salt");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("person_name");

                    b.HasKey("Id");

                    b.HasIndex("PersonName")
                        .IsUnique()
                        .HasDatabaseName("uk_person__person_name");

                    b.ToTable("person", (string)null);
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.Trip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("trip_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BudgetId")
                        .HasColumnType("int")
                        .HasColumnName("budget_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date")
                        .HasColumnName("from_date");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("note");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.HasIndex("FromDate", "ToDate", "BudgetId")
                        .IsUnique()
                        .HasDatabaseName("uk_trip__budget_id__from_date__to_date");

                    b.ToTable("trip", (string)null);
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("unit_id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BudgetId")
                        .HasColumnType("int")
                        .HasColumnName("budget_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("LastModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime(0)")
                        .HasColumnName("row_updated")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unit_name");

                    b.Property<bool>("UseCurrency")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("use_currency");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId", "UnitName")
                        .IsUnique()
                        .HasDatabaseName("uk_unit__budget_id__unit_name");

                    b.ToTable("unit", (string)null);
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.ActualItem", b =>
                {
                    b.HasOne("MoneyCheck.Domain.Enteties.Budget", "Budget")
                        .WithMany("ActualItems")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_actual_item_budget");

                    b.HasOne("MoneyCheck.Domain.Enteties.Category", "Category")
                        .WithMany("ActualItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_actual_item_category");

                    b.HasOne("MoneyCheck.Domain.Enteties.Trip", "Trip")
                        .WithMany("ActualItems")
                        .HasForeignKey("TripId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_actual_item_trip");

                    b.Navigation("Budget");

                    b.Navigation("Category");

                    b.Navigation("Trip");
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.BudgetItem", b =>
                {
                    b.HasOne("MoneyCheck.Domain.Enteties.Category", "Category")
                        .WithMany("BudgetItems")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_budget_item_category");

                    b.HasOne("MoneyCheck.Domain.Enteties.Unit", "Unit")
                        .WithMany("BudgetItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_budget_item_unit");

                    b.HasOne("MoneyCheck.Domain.Enteties.BudgetVersion", "BudgetVersion")
                        .WithMany("BudgetItems")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_budget_item_version");

                    b.Navigation("BudgetVersion");

                    b.Navigation("Category");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.BudgetVersion", b =>
                {
                    b.HasOne("MoneyCheck.Domain.Enteties.BudgetYear", "BudgetYear")
                        .WithMany("BudgetVersions")
                        .HasForeignKey("BudgetYearId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_version_budget_year");

                    b.Navigation("BudgetYear");
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.BudgetYear", b =>
                {
                    b.HasOne("MoneyCheck.Domain.Enteties.Budget", "Budget")
                        .WithMany("BudgetYears")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_budget_year_budget");

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.Category", b =>
                {
                    b.HasOne("MoneyCheck.Domain.Enteties.Budget", "Budget")
                        .WithMany("Categories")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_category_budget");

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.Currency", b =>
                {
                    b.HasOne("MoneyCheck.Domain.Enteties.BudgetVersion", "BudgetVersion")
                        .WithMany("Currencies")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_currency_version");

                    b.Navigation("BudgetVersion");
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.Trip", b =>
                {
                    b.HasOne("MoneyCheck.Domain.Enteties.Budget", "Budget")
                        .WithMany("Trips")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_trip_budget");

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.Unit", b =>
                {
                    b.HasOne("MoneyCheck.Domain.Enteties.Budget", "Budget")
                        .WithMany("Units")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_unit_budget");

                    b.Navigation("Budget");
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.Budget", b =>
                {
                    b.Navigation("ActualItems");

                    b.Navigation("BudgetYears");

                    b.Navigation("Categories");

                    b.Navigation("Trips");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.BudgetVersion", b =>
                {
                    b.Navigation("BudgetItems");

                    b.Navigation("Currencies");
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.BudgetYear", b =>
                {
                    b.Navigation("BudgetVersions");
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.Category", b =>
                {
                    b.Navigation("ActualItems");

                    b.Navigation("BudgetItems");
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.Trip", b =>
                {
                    b.Navigation("ActualItems");
                });

            modelBuilder.Entity("MoneyCheck.Domain.Enteties.Unit", b =>
                {
                    b.Navigation("BudgetItems");
                });
#pragma warning restore 612, 618
        }
    }
}
